from pathlib import PurePosixPath

from pydantic import BaseModel

import config
from models.events import BasePipelineEvent
from utils.types import IngestorLoadFormat, IngestorType


class IngestorStepEvent(BasePipelineEvent):
    ingestor_type: IngestorType
    pipeline_date: str
    index_date: str
    job_id: str
    load_format: IngestorLoadFormat = "parquet"

    def get_path_prefix(self) -> str:
        """
        Return the S3 path prefix of the event.

        Full reindex mode example (job ID stores an autogenerated timestamp):
        `ingestor_concepts/2025-05-05/2025-06-06/20250930T0930`

        Incremental mode example (job ID corresponds to the processed time window):
        `ingestor_concepts/2025-05-05/2025-06-06/2025-01-01T00:00-2025-01-01T00:15`
        """
        job_id = self.job_id
        if self.window is not None:
            job_id = self.window.to_formatted_string()

        parts: list[str] = [
            f"{config.INGESTOR_S3_PREFIX}_{self.ingestor_type}",
            self.pipeline_date,
            self.index_date,
            job_id,
        ]
        return str(PurePosixPath(*parts))

    def get_s3_uri(self, file_name: str) -> str:
        prefix = self.get_path_prefix()
        return f"s3://{config.CATALOGUE_GRAPH_S3_BUCKET}/{prefix}/{file_name}.{self.load_format}"


class IngestorLoaderLambdaEvent(IngestorStepEvent):
    pass


class IngestorIndexerObject(BaseModel):
    s3_uri: str
    content_length: int
    record_count: int


class IngestorIndexerLambdaEvent(IngestorStepEvent):
    objects_to_index: list[IngestorIndexerObject]


class IngestorMonitorStepEvent(IngestorStepEvent):
    force_pass: bool = False


class IngestorIndexerMonitorLambdaEvent(IngestorStepEvent):
    success_count: int
