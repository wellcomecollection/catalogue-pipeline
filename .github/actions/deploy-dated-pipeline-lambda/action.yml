name: "Deploy Dated Pipeline Lambda"
description: "Discovers latest pipeline date, retags image to that date, and deploys the dated pipeline lambda (catalogue-{date}-{lambda_suffix})."
inputs:
  source_tag:
    description: "Existing image tag to retag from (e.g., commit SHA)"
    required: true
  registry:
    description: "ECR registry hostname"
    required: true
  image_name:
    description: "ECR repository/image name"
    required: false
    default: "unified_pipeline_lambda"
  role_to_assume:
    description: "AWS IAM role ARN for ECR/Lambda operations"
    required: true
  aws_region:
    description: "AWS region"
    required: false
    default: "eu-west-1"
  terraform_dir:
    description: "Directory containing dated pipeline terraform folders"
    required: false
    default: "pipeline/terraform"
  lambda_suffix:
    description: "Suffix for the dated lambda name (e.g., transformer_ebsco). The full name becomes catalogue-{date}-{lambda_suffix}."
    required: true
outputs:
  pipeline_date:
    description: "Discovered latest pipeline date"
    value: ${{ steps.discover.outputs.pipeline_date }}
  lambda_name:
    description: "Resolved dated lambda name"
    value: ${{ steps.discover.outputs.lambda_name }}
runs:
  using: "composite"
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Discover latest pipeline date and lambda name
      id: discover
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/discover.sh"
        "${{ github.action_path }}/discover.sh" \
          "${{ inputs.terraform_dir }}" \
          "${{ inputs.lambda_suffix }}"

    - name: Retag image to pipeline date
      uses: ./.github/actions/retag-docker-image
      with:
        registry: ${{ inputs.registry }}
        image_name: ${{ inputs.image_name }}
        source_tag: ${{ inputs.source_tag }}
        target_tag: env.${{ steps.discover.outputs.pipeline_date }}
        role_to_assume: ${{ inputs.role_to_assume }}

    - name: Deploy Lambda to pipeline date image
      uses: ./.github/actions/deploy-lambda-image
      with:
        lambda_name: ${{ steps.discover.outputs.lambda_name }}
        registry: ${{ inputs.registry }}
        image_name: ${{ inputs.image_name }}
        deploy_tag: env.${{ steps.discover.outputs.pipeline_date }}
        role_to_assume: ${{ inputs.role_to_assume }}
        aws_region: ${{ inputs.aws_region }}